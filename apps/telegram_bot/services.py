import requests
import logging
from django.conf import settings
from django.urls import reverse
from .models import TelegramUser, BotMessage

logger = logging.getLogger(__name__)


class TelegramBot:
    def __init__(self):
        self.token = settings.TELEGRAM_BOT_TOKEN
        self.base_url = f"https://api.telegram.org/bot{self.token}"

    def send_message(self, chat_id, text, parse_mode='HTML', reply_markup=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        url = f"{self.base_url}/sendMessage"
        payload = {
            'chat_id': chat_id,
            'text': text,
            'parse_mode': parse_mode
        }

        if reply_markup:
            payload['reply_markup'] = reply_markup

        try:
            response = requests.post(url, json=payload)
            response.raise_for_status()
            return response.json()
        except Exception as e:
            logger.error(f"Error sending message to {chat_id}: {e}")
            return None

    def set_webhook(self, url):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook"""
        webhook_url = f"{url}/telegram/webhook/"
        api_url = f"{self.base_url}/setWebhook?url={webhook_url}"

        try:
            response = requests.get(api_url)
            response.raise_for_status()
            logger.info(f"Webhook set to: {webhook_url}")
            return response.json()
        except Exception as e:
            logger.error(f"Error setting webhook: {e}")
            return None

    def get_me(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ"""
        url = f"{self.base_url}/getMe"
        try:
            response = requests.get(url)
            response.raise_for_status()
            return response.json()
        except Exception as e:
            logger.error(f"Error getting bot info: {e}")
            return None


class MessageHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞"""

    def __init__(self):
        self.bot = TelegramBot()

    def handle_start(self, chat_id, user_data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_text = """
ü§ñ <b>LinguaFlow Bot</b>

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —è–∑—ã–∫–æ–≤! 

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã
/help - –ü–æ–º–æ—â—å –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏  
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑—É—á–µ–Ω–∏—è
/connect - –ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç
/unlink - –û—Ç–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç

üìö <b>–ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç:</b>
‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–∏ —Å–ª–æ–≤
‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–ª–æ–≤–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è

–î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –∫–æ–º–∞–Ω–¥–æ–π /connect
        """

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
        keyboard = {
            'keyboard': [
                [{'text': 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'}, {'text': 'üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å'}],
                [{'text': 'üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç'}, {'text': '‚ùì –ü–æ–º–æ—â—å'}]
            ],
            'resize_keyboard': True
        }

        self.bot.send_message(chat_id, welcome_text, reply_markup=keyboard)

        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        BotMessage.objects.create(
            telegram_id=chat_id,
            message_text="/start",
            response_text=welcome_text,
            command="start"
        )

    def handle_help(self, chat_id, user_data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üìö <b>LinguaFlow - –ü–æ–º–æ—â—å</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>

/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/stats - –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑—É—á–µ–Ω–∏—è
/connect - –ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç —Å–∞–π—Ç–∞
/unlink - –û—Ç–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç

<b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>
1. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –∫–æ–º–∞–Ω–¥–æ–π /connect
2. –ë–æ—Ç –±—É–¥–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–∏ —Å–ª–æ–≤
3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º

<b>–î–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b>
–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ —Å–∞–π—Ç.
        """

        self.bot.send_message(chat_id, help_text)

        BotMessage.objects.create(
            telegram_id=chat_id,
            message_text="/help",
            response_text=help_text,
            command="help"
        )

    def handle_connect(self, chat_id, user_data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /connect"""
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏
        import secrets
        connection_code = secrets.token_hex(8)

        connect_text = f"""
üîó <b>–ü—Ä–∏–≤—è–∑–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞</b>

–î–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ LinguaFlow:

1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç: <b>–≤–∞—à-—Å–∞–π—Ç.com/telegram/connect/</b>
2. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥: <code>{connection_code}</code>
3. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø—Ä–∏–≤—è–∑–∫—É

–ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 10 –º–∏–Ω—É—Ç.

–ü–æ—Å–ª–µ –ø—Ä–∏–≤—è–∑–∫–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ:
‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–∏
‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
‚Ä¢ –ë—ã—Å—Ç—Ä–æ –ø–æ–≤—Ç–æ—Ä—è—Ç—å —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞
        """

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≤ —Å–µ—Å—Å–∏–∏ –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        # –ó–¥–µ—Å—å —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–¥ —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –≤—Ä–µ–º–µ–Ω–∏

        self.bot.send_message(chat_id, connect_text)

        BotMessage.objects.create(
            telegram_id=chat_id,
            message_text="/connect",
            response_text=connect_text,
            command="connect"
        )
        return connection_code

    def handle_stats(self, chat_id, user_data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stats"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ –∞–∫–∫–∞—É–Ω—Ç
        try:
            tg_user = TelegramUser.objects.get(telegram_id=chat_id)
            user = tg_user.user

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            from apps.decks.models import UserWordProgress, Card

            total_cards = Card.objects.filter(deck__user=user).count()
            studied = UserWordProgress.objects.filter(user=user).count()
            mastered = UserWordProgress.objects.filter(user=user, status='mastered').count()

            stats_text = f"""
üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b>{user.username}</b>
üìö –í—Å–µ–≥–æ –∫–∞—Ä—Ç–æ—á–µ–∫: <b>{total_cards}</b>
üìñ –ò–∑—É—á–∞–µ—Ç—Å—è: <b>{studied}</b>
üéØ –í—ã—É—á–µ–Ω–æ: <b>{mastered}</b>

–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üí™
            """

        except TelegramUser.DoesNotExist:
            stats_text = """
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç.

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /connect –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ LinguaFlow.
            """

        self.bot.send_message(chat_id, stats_text)

        BotMessage.objects.create(
            telegram_id=chat_id,
            message_text="/stats",
            response_text=stats_text,
            command="stats"
        )

    def handle_message(self, message_data):
        """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        chat_id = message_data['chat']['id']
        text = message_data.get('text', '').strip()

        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        BotMessage.objects.create(
            telegram_id=chat_id,
            message_text=text,
            command="message"
        )

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
        if text.startswith('/'):
            command = text.split('@')[0].lower()  # –£–±–∏—Ä–∞–µ–º username –±–æ—Ç–∞ –µ—Å–ª–∏ –µ—Å—Ç—å

            if command == '/start':
                self.handle_start(chat_id, message_data.get('from', {}))
            elif command == '/help':
                self.handle_help(chat_id, message_data.get('from', {}))
            elif command == '/connect':
                self.handle_connect(chat_id, message_data.get('from', {}))
            elif command == '/stats':
                self.handle_stats(chat_id, message_data.get('from', {}))
            elif command == '/unlink':
                self.handle_unlink(chat_id, message_data.get('from', {}))
            else:
                self.bot.send_message(chat_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–Ω–æ–ø–∫–∏)
            if text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
                self.handle_stats(chat_id, message_data.get('from', {}))
            elif text == '‚ùì –ü–æ–º–æ—â—å':
                self.handle_help(chat_id, message_data.get('from', {}))
            elif text == 'üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç':
                self.handle_connect(chat_id, message_data.get('from', {}))
            elif text == 'üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å':
                self.handle_review(chat_id, message_data.get('from', {}))
            else:
                self.bot.send_message(chat_id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é –∏–ª–∏ –Ω–∞–±–µ—Ä–∏—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.")

    def handle_unlink(self, chat_id, user_data):
        """–û—Ç–≤—è–∑–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        try:
            tg_user = TelegramUser.objects.get(telegram_id=chat_id)
            tg_user.delete()
            text = "‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω."
        except TelegramUser.DoesNotExist:
            text = "‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –±—ã–ª –ø—Ä–∏–≤—è–∑–∞–Ω."

        self.bot.send_message(chat_id, text)

    def handle_review(self, chat_id, user_data):
        """–ë—ã—Å—Ç—Ä–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞"""
        try:
            tg_user = TelegramUser.objects.get(telegram_id=chat_id)
            user = tg_user.user

            # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
            from apps.decks.services import get_cards_for_study_session
            cards = get_cards_for_study_session(user, 'review', limit=1)

            if cards:
                card = cards[0]
                # –ò–°–ü–†–ê–í–õ–Ø–ï–ú –°–ò–ù–¢–ê–ö–°–ò–° F-–°–¢–†–û–ö–ò:
                transcription_text = f"[{card.transcription}]" if card.transcription else ""

                text = f"""
    üîÑ <b>–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ</b>

    –°–ª–æ–≤–æ: <b>{card.word_original}</b>
    {transcription_text}

    –ù–∞–∂–º–∏—Ç–µ /show —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–µ—Ä–µ–≤–æ–¥
                """
            else:
                text = "üéâ –ù–∞ —Å–µ–≥–æ–¥–Ω—è –≤—Å–µ —Å–ª–æ–≤–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω—ã!"

        except TelegramUser.DoesNotExist:
            text = "–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –∫–æ–º–∞–Ω–¥–æ–π /connect"

        self.bot.send_message(chat_id, text)