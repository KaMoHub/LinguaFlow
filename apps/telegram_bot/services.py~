import logging
from telegram import Update, Bot
from telegram.ext import Dispatcher, MessageHandler, Filters, CommandHandler
from django.conf import settings
from .models import TelegramUser, BotMessage

logger = logging.getLogger(__name__)
bot = Bot(token=settings.TELEGRAM_BOT_TOKEN)
# dispatcher = Dispatcher(bot, update_queue=None, workers=0) # Dispatcher обычно используется с updater, не подходит напрямую для вебхуков
# Для вебхуков мы будем вручную вызывать соответствующие хендлеры или использовать логику обработки


def handle_telegram_update(update_data):
    """
    Основная функция обработки обновления от Telegram.
    """
    try:
        update = Update.de_json(update_data) # Преобразуем словарь в объект Update библиотеки python-telegram-bot

        # Проверяем, есть ли сообщение
        if update.message:
            handle_message(update.message)
        elif update.callback_query:
            handle_callback_query(update.callback_query)
        # Добавьте другие типы обновлений, если нужно (inline_query, chosen_inline_result, shipping_query, pre_checkout_query)
        else:
            logger.info("Получен тип обновления, не требующий специальной обработки.")

    except Exception as e:
        logger.error(f"Ошибка в handle_telegram_update: {e}")


def handle_message(message):
    """
    Обрабатывает входящее сообщение.
    """
    chat_id = message.chat_id
    text = message.text
    user_id = message.from_user.id
    username = message.from_user.username or "" # Может быть None
    first_name = message.from_user.first_name or ""
    last_name = message.from_user.last_name or ""

    logger.info(f"Получено сообщение от {user_id} ({username}): {text}")

    # Сохраняем сообщение в лог (BotMessage)
    BotMessage.objects.create(
        telegram_id=chat_id,
        message_text=text,
        command=text.split()[0] if text.startswith('/') else "", # Сохраняем команду, если это команда
    )

    # Получаем или создаем TelegramUser
    telegram_user, created = TelegramUser.objects.get_or_create(
        telegram_id=user_id,
        defaults={
            'username': username,
            'first_name': first_name,
            'last_name': last_name,
        }
    )
    if created:
        logger.info(f"Создан новый пользователь Telegram: {telegram_user}")
    else:
        # Обновляем данные пользователя, если они изменились
        updated = False
        if telegram_user.username != username:
            telegram_user.username = username
            updated = True
        if telegram_user.first_name != first_name:
            telegram_user.first_name = first_name
            updated = True
        if telegram_user.last_name != last_name:
            telegram_user.last_name = last_name
            updated = True
        if updated:
            telegram_user.save()

    # --- Основная логика обработки сообщений ---
    # Здесь вы реализуете, что должен делать бот.
    # Пример: обработка команд и простого текста
    if text == '/start':
        response_text = f"Привет, {first_name}! Добро пожаловать в LinguaFlow!"
        bot.send_message(chat_id=chat_id, text=response_text)
        # Сохраняем ответ в лог
        BotMessage.objects.create(telegram_id=chat_id, response_text=response_text)
    elif text.startswith('/'):
        # Обработка других команд
        response_text = f"Команда '{text.split()[0]}' пока не реализована."
        bot.send_message(chat_id=chat_id, text=response_text)
        BotMessage.objects.create(telegram_id=chat_id, response_text=response_text)
    else:
        # Обработка обычного текста
        response_text = f"Вы сказали: {text}. Я пока не умею отвечать на произвольный текст, но могу обрабатывать команды. Попробуйте /start."
        bot.send_message(chat_id=chat_id, text=response_text)
        BotMessage.objects.create(telegram_id=chat_id, response_text=response_text)


def handle_callback_query(callback_query):
    """
    Обрабатывает callback query (например, от inline клавиатур).
    """
    query_id = callback_query.id
    chat_id = callback_query.message.chat_id
    data = callback_query.data

    logger.info(f"Получен callback_query с данными: {data}")

    # Ваша логика обработки данных callback_query
    # Например, обновление состояния пользователя, отправка нового сообщения и т.д.

    # Ответим Telegram, что запрос обработан
    bot.answer_callback_query(query_id, text="Callback обработан!")


# services.py